### MUTECT2

rule mutect2:
        input:
                mut='results/{S}/02-alignment/{S}_T.bam',
                wt='results/{S}/02-alignment/{S}_N.bam',
                ref_fa = config['ref']['ref_fa'],
                gnomad = config['ref']['gnomad'],
                pon = config['ref']['pon']
        output:
                'results/{S}/06-variants/mutect2/{S}.mutect2.vcf.gz'
        resources:
                runtime=240,
                cpus_per_task=4,
                mem_mb=36000,
                account=config['resources']['user_cesga']
        shell:
                """
                mkdir -p results/{wildcards.S}/06-variants/mutect2/
                
                module load gatk
                gatk Mutect2 -R {input.ref_fa} -I {input.mut} -I {input.wt} -normal NORMAL \
                --germline-resource {input.gnomad} --panel-of-normals {input.pon} -O {output} \
                --dont-use-soft-clipped-bases true --min-base-quality-score 20 --max-reads-per-alignment-start 100 \
                --max-population-af 0.001 --tumor-lod-to-emit 2.0 --normal-lod 3.0 -A "StrandBiasBySample" \
                --annotation-group "StandardAnnotation" --disable-adaptive-pruning false
                module unload gatk
                """
rule CreateContaminationTable:
        input:
                tumor='results/{S}/02-alignment/{S}_T.bam',
                normal='results/{S}/02-alignment/{S}_N.bam',
                gnomad=config['ref']['gnomad'],
                common=config['ref']['common']
        output:
                tumor_table='results/{S}/06-variants/mutect2/tumor.table',
                normal_table='results/{S}/06-variants/mutect2/normal.table',
                contamination='results/{S}/06-variants/mutect2/contamination.table'
        resources:
                runtime=360,
                cpus_per_task=4,
                mem_mb=36000,
                account=config['resources']['user_cesga']
        shell:
                """
                mkdir -p results/{wildcards.S}/06-variants/mutect2/

                module load gatk
                gatk GetPileupSummaries -I {input.tumor} -V {input.gnomad} -L {input.common} -O {output.tumor_table}

                gatk GetPileupSummaries -I {input.normal} -V {input.gnomad} -L {input.common} -O {output.normal_table}

                gatk CalculateContamination -I {output.tumor_table} -matched {output.normal_table} -O {output.contamination}
                module unload gatk
                """
rule FilterMutectCalls:
        input:
                mutect2_vcf='results/{S}/06-variants/mutect2/{S}.mutect2.vcf.gz',
                ref=config['ref']['ref_fa'],
                contamination='results/{S}/06-variants/mutect2/contamination.table'
        output:
                'results/{S}/06-variants/mutect2/{S}.mutect2.filtered.vcf.gz'
        resources:
                runtime=240,
                cpus_per_task=4,
                mem_mb=24000,
                account=config['resources']['user_cesga']
        shell:
                """
                module load gatk
                gatk FilterMutectCalls -V {input.mutect2_vcf} -R {input.ref} --contamination-table {input.contamination} \
                --min-median-mapping-quality 20 --min-reads-per-strand 1 --unique-alt-read-count 2 --max-n-ratio 0.1 \
                --max-events-in-region 3 -O results/{wildcards.S}/06-variants/mutect2/{wildcards.S}.mutect2.vcf.gz
                module unload gatk

                module load cesga/2020 bcftools/1.19
                bcftools view -f 'PASS' results/{wildcards.S}/06-variants/mutect2/{wildcards.S}.mutect2.vcf.gz -O b -o {output}
                tabix -p vcf {output}
                module unload cesga/2020 bcftools/1.19

                rm results/{wildcards.S}/06-variants/{wildcards.S}.mutect2.vcf.gz
                """


### ANNOVAR

rule annotate:
        input:
                sample='results/dna-seq/{S}.vcf.gz',
                convert= config['software']['convert2annovar'],
                create_annovar= config['software']['table_annovar'],
                human= config['ref']['annovar_humandb']
        output:
                'results/dna-seq/{S}_annotated.txt'
        threads: 16
        shell:
                """
                # Convertir VCF a AVINPUT
                perl {input.convert} --format vcf4old {input.sample} > results/dna-seq/{wildcards.S}/{wildcards.S}_annovar.avinput

                # Anotaci칩n con par치metros v치lidos para tu versi칩n de ANNOVAR
                perl {input.create_annovar} results/dna-seq/{wildcards.S}/{wildcards.S}_annovar.avinput {input.human} -buildver hg38 \
                -out results/dna-seq/{wildcards.S}/{wildcards.S} \
                -protocol refGene,clinvar_20240611,gnomad40_exome,dbnsfp47a,cosmic10 \
                -operation g,f,f,f,f -nastring . -polish --onetranscript --remove --intronhgvs 100 --thread {threads}

                mv results/dna-seq/{wildcards.S}/{wildcards.S}.hg38_multianno.txt {output}
                """