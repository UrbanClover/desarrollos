# Snakefile_normal.smk - Procesamiento de muestras Normales
import sys
sys.path.append('ngs')
import sample_ids

# Muestras Normales (ej: LC_1_Normal, LC_2_Normal...)
NORMAL_SAMPLES = [s for s in sample_ids.get_sample_ids('data') if s.endswith('_Normal')]
PATIENTS_NORMAL = list(set([s.rsplit('_', 1)[0] for s in NORMAL_SAMPLES]))

# Referencia
REF_GENOME = "/mnt/lustre/scratch/nlsas/home/otras/hcx/iba/ngs/ref/wes_ref/GRCh38.p14.genome.fa"

# === Reglas para Normales ===
rule all:
    input:
        # Objetivos: BAMs alineados y ordenados
        expand("resultados/normal/{sample}.sorted.bam", sample=NORMAL_SAMPLES)

# Alineamiento y procesamiento b√°sico
rule align_normal:
    input:
        r1 = "data/{sample}_R1.fastq.gz",
        r2 = "data/{sample}_R2.fastq.gz",
        ref = REF_GENOME
    output:
        bam = "resultados/normal/{sample}.sorted.bam"
    params:
        sample_name = lambda wildcards: wildcards.sample.replace("_Cancer", "")
    resources:
        runtime=600,
        cpus_per_task=8,
        mem_mb=16000
    shell:
        """
        module load bwa samtools
        mkdir -p resultados/normal
        bwa mem -t {resources.cpus_per_task} \
        -R "@RG\\tID:{params.sample_name}\\tSM:{params.sample_name}\\tLB:WES\\tPL:ILLUMINA" \
        {input.ref} {input.r1} {input.r2} | \
        samtools sort -@ {resources.cpus_per_task} -o {output.bam} -
        samtools index {output.bam}
        """